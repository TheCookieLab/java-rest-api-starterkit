{
 "model": {
    "kind": "model",
    "name": "restConfiguration",
    "title": "Rest Configuration",
    "description": "To configure rest",
    "javaType": "org.apache.camel.model.rest.RestConfigurationDefinition",
    "label": "rest",
    "input": "false",
    "output": "false"
  },
  "properties": {
    "component": { "kind": "attribute", "required": "false", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "The Camel Rest component to use for the REST transport such as restlet spark-rest. If no component has been explicit configured then Camel will lookup if there is a Camel component that integrates with the Rest DSL or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry. If either one is found then that is being used." },
    "scheme": { "kind": "attribute", "required": "false", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "The scheme to use for exposing the REST service. Usually http or https is supported. The default value is http" },
    "host": { "kind": "attribute", "required": "false", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "The hostname to use for exposing the REST service." },
    "port": { "kind": "attribute", "required": "false", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "The port number to use for exposing the REST service. Notice if you use servlet component then the port number configured here does not apply as the port number in use is the actual port number the servlet component is using. eg if using Apache Tomcat its the tomcat http port if using Apache Karaf its the HTTP service in Karaf that uses port 8181 by default etc. Though in those situations setting the port number here allows tooling and JMX to know the port number so its recommended to set the port number to the number that the servlet engine uses." },
    "contextPath": { "kind": "attribute", "required": "false", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "Sets a leading context-path the REST services will be using. This can be used when using components such as SERVLET where the deployed web application is deployed using a context-path." },
    "hostNameResolver": { "kind": "attribute", "required": "false", "type": "string", "javaType": "org.apache.camel.model.rest.RestHostNameResolver", "enum": [ "localHostName", "localIp" ], "deprecated": "false", "description": "If no hostname has been explicit configured then this resolver is used to compute the hostname the REST service will be using." },
    "bindingMode": { "kind": "attribute", "required": "false", "type": "string", "javaType": "org.apache.camel.model.rest.RestBindingMode", "enum": [ "auto", "json", "json_xml", "off", "xml" ], "deprecated": "false", "defaultValue": "auto", "description": "Sets the binding mode to use. The default value is auto" },
    "skipBindingOnErrorCode": { "kind": "attribute", "required": "false", "type": "boolean", "javaType": "java.lang.Boolean", "deprecated": "false", "defaultValue": "false", "description": "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc as success messages otherwise will do." },
    "enableCORS": { "kind": "attribute", "required": "false", "type": "boolean", "javaType": "java.lang.Boolean", "deprecated": "false", "defaultValue": "false", "description": "Whether to enable CORS headers in the HTTP response. The default value is false." },
    "jsonDataFormat": { "kind": "attribute", "required": "false", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "Name of specific json data format to use. By default json-jackson will be used. Important: This option is only for setting a custom name of the data format not to refer to an existing data format instance." },
    "xmlDataFormat": { "kind": "attribute", "required": "false", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "Name of specific XML data format to use. By default jaxb will be used. Important: This option is only for setting a custom name of the data format not to refer to an existing data format instance." },
    "componentProperty": { "kind": "element", "required": "false", "type": "array", "javaType": "java.util.List<org.apache.camel.model.rest.RestPropertyDefinition>", "deprecated": "false", "description": "Allows to configure as many additional properties for the rest component in use." },
    "endpointProperty": { "kind": "element", "required": "false", "type": "array", "javaType": "java.util.List<org.apache.camel.model.rest.RestPropertyDefinition>", "deprecated": "false", "description": "Allows to configure as many additional properties for the rest endpoint in use." },
    "consumerProperty": { "kind": "element", "required": "false", "type": "array", "javaType": "java.util.List<org.apache.camel.model.rest.RestPropertyDefinition>", "deprecated": "false", "description": "Allows to configure as many additional properties for the rest consumer in use." },
    "dataFormatProperty": { "kind": "element", "required": "false", "type": "array", "javaType": "java.util.List<org.apache.camel.model.rest.RestPropertyDefinition>", "deprecated": "false", "description": "Allows to configure as many additional properties for the data formats in use. For example set property prettyPrint to true to have json outputted in pretty mode. The properties can be prefixed to denote the option is only for either JSON or XML and for either the IN or the OUT. The prefixes are: json.in. json.out. xml.in. xml.out. For example a key with value xml.out.mustBeJAXBElement is only for the XML data format for the outgoing. A key without a prefix is a common key for all situations." },
    "corsHeaders": { "kind": "element", "required": "false", "type": "array", "javaType": "java.util.List<org.apache.camel.model.rest.RestPropertyDefinition>", "deprecated": "false", "description": "Allows to configure custom CORS headers." }
  }
}

