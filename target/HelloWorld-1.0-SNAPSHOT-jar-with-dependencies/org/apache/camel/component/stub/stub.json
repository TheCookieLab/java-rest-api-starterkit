{
 "component": {
    "kind": "component",
    "scheme": "stub",
    "syntax": "stub:name",
    "title": "Stub",
    "description": "The Stub Component is for stubbing out endpoints while developing or testing.",
    "label": "core,testing",
    "javaType": "org.apache.camel.component.stub.StubComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-core",
    "version": "2.15.2"
  },
  "componentProperties": {
    "queueSize": { "kind": "property", "type": "integer", "javaType": "int", "deprecated": "false", "description": "Sets the default maximum capacity of the SEDA queue (i.e. the number of messages it can hold)." },
    "concurrentConsumers": { "kind": "property", "type": "integer", "javaType": "int", "deprecated": "false", "description": "Sets the default number of concurrent threads processing exchanges." },
    "defaultQueueFactory": { "kind": "property", "type": "object", "javaType": "org.apache.camel.component.seda.BlockingQueueFactory<org.apache.camel.Exchange>", "deprecated": "false", "description": "Sets the default queue factory." }
  },
  "properties": {
    "name": { "kind": "path", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "Name of queue" },
    "size": { "kind": "parameter", "type": "integer", "javaType": "int", "deprecated": "false", "defaultValue": "2147483647", "description": "The maximum capacity of the SEDA queue (i.e. the number of messages it can hold)." },
    "concurrentConsumers": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "defaultValue": "1", "description": "Number of concurrent threads processing exchanges." },
    "multipleConsumers": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "Specifies whether multiple consumers are allowed. If enabled you can use SEDA for Publish-Subscribe messaging. That is you can send a message to the SEDA queue and have each consumer receive a copy of the message. When enabled this option should be specified on every consumer endpoint." },
    "purgeWhenStopping": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "Whether to purge the task queue when stopping the consumer/route. This allows to stop faster as any pending messages on the queue is discarded." },
    "pollTimeout": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "defaultValue": "1000", "description": "The timeout used when polling. When a timeout occurs the consumer can check whether it is allowed to continue running. Setting a lower value allows the consumer to react more quickly upon shutdown." },
    "waitForTaskToComplete": { "kind": "parameter", "label": "producer", "type": "string", "javaType": "org.apache.camel.WaitForTaskToComplete", "enum": [ "Never", "IfReplyExpected", "Always" ], "deprecated": "false", "defaultValue": "IfReplyExpected", "description": "Option to specify whether the caller should wait for the async task to complete or not before continuing. The following three options are supported: Always Never or IfReplyExpected. The first two values are self-explanatory. The last value IfReplyExpected will only wait if the message is Request Reply based. The default option is IfReplyExpected." },
    "timeout": { "kind": "parameter", "label": "producer", "type": "integer", "javaType": "long", "deprecated": "false", "defaultValue": "30000", "description": "Timeout (in milliseconds) before a SEDA producer will stop waiting for an asynchronous task to complete. You can disable timeout by using 0 or a negative value." },
    "blockWhenFull": { "kind": "parameter", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default an exception will be thrown stating that the queue is full. By enabling this option the calling thread will instead block and wait until the message can be accepted." },
    "failIfNoConsumers": { "kind": "parameter", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "Whether the producer should fail by throwing an exception when sending to a SEDA queue with no active consumers." },
    "exchangePattern": { "kind": "parameter", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "defaultValue": "InOnly", "description": "Sets the default exchange pattern when creating an exchange." },
    "synchronous": { "kind": "parameter", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

