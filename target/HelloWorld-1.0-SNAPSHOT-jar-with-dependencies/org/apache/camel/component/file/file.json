{
 "component": {
    "kind": "component",
    "scheme": "file",
    "syntax": "file:directoryName",
    "title": "File",
    "description": "The File Component provides access to file systems.",
    "label": "core,file",
    "javaType": "org.apache.camel.component.file.FileComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-core",
    "version": "2.15.2"
  },
  "componentProperties": {
  },
  "properties": {
    "directoryName": { "kind": "path", "required": "true", "type": "object", "javaType": "java.io.File", "deprecated": "false", "description": "The starting directory" },
    "copyAndDeleteOnRenameFail": { "kind": "parameter", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "true", "description": "Whether to fallback and do a copy and delete file in case the file could not be renamed directly. This option is not available for the FTP component." },
    "renameUsingCopy": { "kind": "parameter", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "Perform rename operations using a copy and delete strategy. This is primarily used in environments where the regular rename operation is unreliable (e.g. across different file systems or networks). This option takes precedence over the copyAndDeleteOnRenameFail parameter that will automatically fall back to the copy and delete strategy but only after additional delays." },
    "forceWrites": { "kind": "parameter", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "true", "description": "Whether to force syncing writes to the file system. You can turn this off if you do not want this level of guarantee for example if writing to logs / audit logs etc; this would yield better performance." },
    "autoCreate": { "kind": "parameter", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "true", "description": "Automatically create missing directories in the file's pathname. For the file consumer that means creating the starting directory. For the file producer it means the directory the files should be written to." },
    "bufferSize": { "kind": "parameter", "type": "integer", "javaType": "int", "deprecated": "false", "defaultValue": "131072", "description": "Write buffer sized in bytes." },
    "flatten": { "kind": "parameter", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "Flatten is used to flatten the file name path to strip any leading paths so it's just the file name. This allows you to consume recursively into sub-directories but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths." },
    "charset": { "kind": "parameter", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "This option is used to specify the encoding of the file. You can use this on the consumer to specify the encodings of the files which allow Camel to know the charset it should load the file content in case the file content is being accessed. Likewise when writing a file you can use this option to specify which charset to write the file as well." },
    "fileName": { "kind": "parameter", "type": "object", "javaType": "org.apache.camel.Expression", "deprecated": "false", "description": "Use Expression such as File Language to dynamically set the filename. For consumers it's used as a filename filter. For producers it's used to evaluate the filename to write. If an expression is set it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression). The expression options support both String and Expression types. If the expression is a String type it is always evaluated using the File Language. If the expression is an Expression type the specified Expression type is used - this allows you for instance to use OGNL expressions. For the consumer you can use it to filter filenames so you can for instance consume today's file using the File Language syntax: mydata-$date:now:yyyyMMdd.txt. The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header; the CamelOverruleFileName is a header that is used only once and makes it easier as this avoids to temporary store CamelFileName and have to restore it afterwards." },
    "fileExist": { "kind": "parameter", "label": "producer", "type": "string", "javaType": "org.apache.camel.component.file.GenericFileExist", "enum": [ "Override", "Append", "Fail", "Ignore", "Move", "TryRename" ], "deprecated": "false", "defaultValue": "Override", "description": "What to do if a file already exists with the same name. Override which is the default replaces the existing file. Append - adds content to the existing file. Fail - throws a GenericFileOperationException indicating that there is already an existing file. Ignore - silently ignores the problem and does not override the existing file but assumes everything is okay. Move - option requires to use the moveExisting option to be configured as well. The option eagerDeleteTargetFile can be used to control what to do if an moving the file and there exists already an existing file otherwise causing the move operation to fail. The Move option will move any existing files before writing the target file. TryRename Camel is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name without doing any exists check.This check may be faster on some file systems and especially FTP servers." },
    "tempPrefix": { "kind": "parameter", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "This option is used to write the file using a temporary name and then after the write is complete rename it to the real name. Can be used to identify files being written and also avoid consumers (not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files." },
    "tempFileName": { "kind": "parameter", "label": "producer", "type": "object", "javaType": "org.apache.camel.Expression", "deprecated": "false", "description": "The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language." },
    "eagerDeleteTargetFile": { "kind": "parameter", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "true", "description": "Whether or not to eagerly delete any existing target file. This option only applies when you use fileExists=Override and the tempFileName option as well. You can use this to disable (set it to false) deleting the target file before the temp file is written. For example you may write big files and want the target file to exists during the temp file is being written. This ensure the target file is only deleted until the very last moment just before the temp file is being renamed to the target filename. This option is also used to control whether to delete any existing files when fileExist=Move is enabled and an existing file exists. If this option copyAndDeleteOnRenameFails false then an exception will be thrown if an existing file existed if its true then the existing file is deleted before the move operation." },
    "keepLastModified": { "kind": "parameter", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "Will keep the last modified timestamp from the source file (if any). Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp. This header can contain either a java.util.Date or long with the timestamp. If the timestamp exists and the option is enabled it will set this timestamp on the written file. Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers." },
    "doneFileName": { "kind": "parameter", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "If provided then Camel will write a 2nd done file when the original file has been written. The done file will be empty. This option configures what file name to use. Either you can specify a fixed name. Or you can use dynamic placeholders. The done file will always be written in the same folder as the original file. Only $file.name and $file.name.noext is supported as dynamic placeholders." },
    "allowNullBody": { "kind": "parameter", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "Used to specify if a null body is allowed during file writing. If set to true then an empty file will be created when set to false and attempting to send a null body to the file component a GenericFileWriteException of 'Cannot write null body to file.' will be thrown. If the fileExist option is set to 'Override' then the file will be truncated and if set to append the file will remain unchanged." },
    "chmod": { "kind": "parameter", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "Specify the file permissions which is sent by the producer the chmod value must be between 000 and 777; If there is a leading digit like in 0755 we will ignore it." },
    "processStrategy": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "org.apache.camel.component.file.GenericFileProcessStrategy<T>", "deprecated": "false", "description": "A pluggable org.apache.camel.component.file.GenericFileProcessStrategy allowing you to implement your own readLock option or similar. Can also be used when special conditions must be met before a file can be consumed such as a special ready file exists. If this option is set then the readLock option does not apply." },
    "inProgressRepository": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "org.apache.camel.spi.IdempotentRepository<java.lang.String>", "deprecated": "false", "description": "A pluggable in-progress repository org.apache.camel.spi.IdempotentRepository. The in-progress repository is used to account the current in progress files being consumed. By default a memory based repository is used." },
    "localWorkDirectory": { "kind": "parameter", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "When consuming a local work directory can be used to store the remote file content directly in local files to avoid loading the content into memory. This is beneficial if you consume a very big remote file and thus can conserve memory." },
    "startingDirectoryMustExist": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "Whether the starting directory must exist. Mind that the autoCreate option is default enabled which means the starting directory is normally auto created if it doesn't exist. You can disable autoCreate and enable this to ensure the starting directory must exist. Will thrown an exception if the directory doesn't exist." },
    "directoryMustExist": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "Similar to startingDirectoryMustExist but this applies during polling recursive sub directories." },
    "noop": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "If true the file is not moved or deleted in any way. This option is good for readonly data or for ETL type requirements. If noop=true Camel will set idempotent=true as well to avoid consuming the same files over and over again." },
    "recursive": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "If a directory will look for files in all the sub-directories as well." },
    "delete": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "If true the file will be deleted after it is processed successfully." },
    "maxMessagesPerPoll": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "description": "Tlo define a maximum messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files. Set a value of 0 or negative to disabled it. Notice: If this option is in use then the File and FTP components will limit before any sorting. For example if you have 100000 files and use maxMessagesPerPoll=500 then only the first 500 files will be picked up and then sorted. You can use the eagerMaxMessagesPerPoll option and set this to false to allow to scan all files first and then sort afterwards." },
    "eagerMaxMessagesPerPoll": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "true", "description": "Allows for controlling whether the limit from maxMessagesPerPoll is eager or not. If eager then the limit is during the scanning of files. Where as false would scan all files and then perform sorting. Setting this option to false allows for sorting all files first and then limit the poll. Mind that this requires a higher memory usage as all file details are in memory to perform the sorting." },
    "maxDepth": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "defaultValue": "2147483647", "description": "The maximum depth to traverse when recursively processing a directory." },
    "minDepth": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "description": "The minimum depth to start processing when recursively processing a directory. Using minDepth=1 means the base directory. Using minDepth=2 means the first sub directory." },
    "include": { "kind": "parameter", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "Is used to include files if filename matches the regex pattern." },
    "exclude": { "kind": "parameter", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "Is used to exclude files if filename matches the regex pattern." },
    "move": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "org.apache.camel.Expression", "deprecated": "false", "description": "Expression (such as Simple Language) used to dynamically set the filename when moving it after processing. To move files into a .done subdirectory just enter .done." },
    "moveFailed": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "org.apache.camel.Expression", "deprecated": "false", "description": "Sets the move failure expression based on Simple language. For example to move files into a .error subdirectory use: .error. Note: When moving the files to the fail location Camel will handle the error and will not pick up the file again." },
    "preMove": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "org.apache.camel.Expression", "deprecated": "false", "description": "Expression (such as File Language) used to dynamically set the filename when moving it before processing. For example to move in-progress files into the order directory set this value to order." },
    "moveExisting": { "kind": "parameter", "label": "producer", "type": "object", "javaType": "org.apache.camel.Expression", "deprecated": "false", "description": "Expression (such as File Language) used to compute file name to use when fileExist=Move is configured. To move files into a backup subdirectory just enter backup. This option only supports the following File Language tokens: file:name file:name.ext file:name.noext file:onlyname file:onlyname.noext file:ext and file:parent. Notice the file:parent is not supported by the FTP component as the FTP component can only move any existing files to a relative directory based on current dir as base." },
    "idempotent": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "java.lang.Boolean", "deprecated": "false", "description": "Option to use the Idempotent Consumer EIP pattern to let Camel skip already processed files. Will by default use a memory based LRUCache that holds 1000 entries. If noop=true then idempotent will be enabled as well to avoid consuming the same files over and over again." },
    "idempotentKey": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "org.apache.camel.Expression", "deprecated": "false", "description": "To use a custom idempotent key. By default the absolute path of the file is used. You can use the File Language for example to use the file name and file size you can do: idempotentKey=$file:name-$file:size" },
    "idempotentRepository": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "org.apache.camel.spi.IdempotentRepository<java.lang.String>", "deprecated": "false", "description": "A pluggable repository org.apache.camel.spi.IdempotentRepository which by default use MemoryMessageIdRepository if none is specified and idempotent is true." },
    "filter": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "org.apache.camel.component.file.GenericFileFilter<T>", "deprecated": "false", "description": "Pluggable filter as a org.apache.camel.component.file.GenericFileFilter class. Will skip files if filter returns false in its accept() method." },
    "antInclude": { "kind": "parameter", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "Ant style filter inclusion. Multiple inclusions may be specified in comma-delimited format." },
    "antExclude": { "kind": "parameter", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "Ant style filter exclusion. If both antInclude and antExclude are used antExclude takes precedence over antInclude. Multiple exclusions may be specified in comma-delimited format." },
    "sorter": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "java.util.Comparator<org.apache.camel.component.file.GenericFile<T>>", "deprecated": "false", "description": "Pluggable sorter as a java.util.Comparator class." },
    "sortBy": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "java.util.Comparator<org.apache.camel.Exchange>", "deprecated": "false", "description": "Built-in sort by using the File Language. Supports nested sorts so you can have a sort by file name and as a 2nd group sort by modified date." },
    "readLock": { "kind": "parameter", "label": "consumer", "type": "string", "javaType": "java.lang.String", "enum": [ "none", "markerFile", "fileLock", "rename", "changed" ], "deprecated": "false", "description": "Used by consumer to only poll the files if it has exclusive read-lock on the file (i.e. the file is not in-progress or being written). Camel will wait until the file lock is granted. This option provides the build in strategies: none - No read lock is in use markerFile - Camel creates a marker file (fileName.camelLock) and then holds a lock on it. This option is not available for the FTP component changed - Changed is using file length/modification timestamp to detect whether the file is currently being copied or not. Will at least use 1 sec to determine this so this option cannot consume files as fast as the others but can be more reliable as the JDK IO API cannot always determine whether a file is currently being used by another process. The option readLockCheckInterval can be used to set the check frequency. fileLock - is for using java.nio.channels.FileLock. This option is not avail for the FTP component. This approach should be avoided when accessing a remote file system via a mount/share unless that file system supports distributed file locks. rename - rename is for using a try to rename the file as a test if we can get exclusive read-lock. Notice: The various read locks is not all suited to work in clustered mode where concurrent consumers on different nodes is competing for the same files on a shared file system. The markerFile using a close to atomic operation to create the empty marker file but its not guaranteed to work in a cluster. The fileLock may work better but then the file system need to support distributed file locks and so on." },
    "readLockCheckInterval": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "long", "deprecated": "false", "defaultValue": "1000", "description": "Interval in millis for the read-lock if supported by the read lock. This interval is used for sleeping between attempts to acquire the read lock. For example when using the changed read lock you can set a higher interval period to cater for slow writes. The default of 1 sec. may be too fast if the producer is very slow writing the file. Notice: For FTP the default readLockCheckInterval is 5000. The readLockTimeout value must be higher than readLockCheckInterval but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit." },
    "readLockTimeout": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "long", "deprecated": "false", "defaultValue": "10000", "description": "Optional timeout in millis for the read-lock if supported by the read-lock. If the read-lock could not be granted and the timeout triggered then Camel will skip the file. At next poll Camel will try the file again and this time maybe the read-lock could be granted. Use a value of 0 or lower to indicate forever. Currently fileLock changed and rename support the timeout. Notice: For FTP the default readLockTimeout value is 20000 instead of 10000. The readLockTimeout value must be higher than readLockCheckInterval but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit." },
    "readLockMarkerFile": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "true", "description": "Whether to use marker file with the changed rename or exclusive read lock types. By default a marker file is used as well to guard against other processes picking up the same files. This behavior can be turned off by setting this option to false. For example if you do not want to write marker files to the file systems by the Camel application." },
    "readLockLoggingLevel": { "kind": "parameter", "label": "consumer", "type": "string", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "DEBUG", "ERROR", "INFO", "TRACE", "WARN", "OFF" ], "deprecated": "false", "defaultValue": "WARN", "description": "Logging level used when a read lock could not be acquired. By default a WARN is logged. You can change this level for example to OFF to not have any logging. This option is only applicable for readLock of types: changed fileLock rename." },
    "readLockMinLength": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "long", "deprecated": "false", "defaultValue": "1", "description": "This option applied only for readLock=changed. This option allows you to configure a minimum file length. By default Camel expects the file to contain data and thus the default value is 1. You can set this option to zero to allow consuming zero-length files." },
    "readLockMinAge": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "long", "deprecated": "false", "defaultValue": "0", "description": "This option applied only for readLock=change. This options allows to specify a minimum age the file must be before attempting to acquire the read lock. For example use readLockMinAge=300s to require the file is at last 5 minutes old. This can speedup the changed read lock as it will only attempt to acquire files which are at least that given age." },
    "exclusiveReadLockStrategy": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy<T>", "deprecated": "false", "description": "Pluggable read-lock as a org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy implementation." },
    "startScheduler": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "true", "description": "Whether the scheduler should be auto started." },
    "initialDelay": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "long", "deprecated": "false", "defaultValue": "1000", "description": "Milliseconds before the first poll starts." },
    "delay": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "long", "deprecated": "false", "defaultValue": "500", "description": "Milliseconds before the next poll." },
    "timeUnit": { "kind": "parameter", "label": "consumer", "type": "string", "javaType": "java.util.concurrent.TimeUnit", "enum": [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ], "deprecated": "false", "defaultValue": "MILLISECONDS", "description": "Time unit for initialDelay and delay options." },
    "useFixedDelay": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "true", "description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details." },
    "pollStrategy": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "org.apache.camel.spi.PollingConsumerPollStrategy", "deprecated": "false", "description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel. In other words the error occurred while the polling was gathering information for instance access to a file network failed so Camel cannot access it to scan for files. The default implementation will log the caused exception at WARN level and ignore it." },
    "runLoggingLevel": { "kind": "parameter", "label": "consumer", "type": "string", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "DEBUG", "ERROR", "INFO", "TRACE", "WARN", "OFF" ], "deprecated": "false", "defaultValue": "TRACE", "description": "The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that." },
    "sendEmptyMessageWhenIdle": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead." },
    "greedy": { "kind": "parameter", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages." },
    "scheduler": { "kind": "parameter", "label": "consumer", "type": "string", "javaType": "org.apache.camel.spi.ScheduledPollConsumerScheduler", "enum": [ "spring", "quartz2" ], "deprecated": "false", "description": "Allow to plugin a custom org.apache.camel.spi.ScheduledPollConsumerScheduler to use as the scheduler for firing when the polling consumer runs. The default implementation uses the ScheduledExecutorService and there is a Quartz2 and Spring based which supports CRON expressions. Notice: If using a custom scheduler then the options for initialDelay useFixedDelay timeUnit and scheduledExecutorService may not be in use. Use the text quartz2 to refer to use the Quartz2 scheduler; and use the text spring to use the Spring based; and use the text myScheduler to refer to a custom scheduler by its id in the Registry. See Quartz2 page for an example." },
    "schedulerProperties": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "deprecated": "false", "description": "To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler." },
    "scheduledExecutorService": { "kind": "parameter", "label": "consumer", "type": "object", "javaType": "java.util.concurrent.ScheduledExecutorService", "deprecated": "false", "description": "Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool. This option allows you to share a thread pool among multiple consumers." },
    "backoffMultiplier": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured." },
    "backoffIdleThreshold": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in." },
    "backoffErrorThreshold": { "kind": "parameter", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in." },
    "exchangePattern": { "kind": "parameter", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "defaultValue": "InOnly", "description": "Sets the default exchange pattern when creating an exchange." },
    "synchronous": { "kind": "parameter", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

