{
 "component": {
    "kind": "component",
    "scheme": "mock",
    "syntax": "mock:name",
    "title": "Mock",
    "description": "The Mock Component provides mock endpoints for testing.",
    "label": "core,testing",
    "producerOnly": "true",
    "javaType": "org.apache.camel.component.mock.MockComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-core",
    "version": "2.15.2"
  },
  "componentProperties": {
  },
  "properties": {
    "name": { "kind": "path", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "description": "Name of mock endpoint" },
    "expectedCount": { "kind": "parameter", "type": "integer", "javaType": "int", "deprecated": "false", "defaultValue": "-1", "description": "Specifies the expected number of message exchanges that should be received by this endpoint. Beware: If you want to expect that 0 messages then take extra care as 0 matches when the tests starts so you need to set a assert period time to let the test run for a while to make sure there are still no messages arrived; for that use link setAssertPeriod(long). An alternative is to use NotifyBuilder and use the notifier to know when Camel is done routing some messages before you call the link assertIsSatisfied() method on the mocks. This allows you to not use a fixed assert period to speedup testing times. If you want to assert that exactly n'th message arrives to this mock endpoint then see also the link setAssertPeriod(long) method for further details." },
    "sleepForEmptyTest": { "kind": "parameter", "type": "integer", "javaType": "long", "deprecated": "false", "defaultValue": "0", "description": "Allows a sleep to be specified to wait to check that this endpoint really is empty when link expectedMessageCount(int) is called with zero" },
    "resultWaitTime": { "kind": "parameter", "type": "integer", "javaType": "long", "deprecated": "false", "defaultValue": "0", "description": "Sets the maximum amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied" },
    "resultMinimumWaitTime": { "kind": "parameter", "type": "integer", "javaType": "long", "deprecated": "false", "defaultValue": "0", "description": "Sets the minimum expected amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied" },
    "assertPeriod": { "kind": "parameter", "type": "integer", "javaType": "long", "deprecated": "false", "defaultValue": "0", "description": "Sets a grace period after which the mock endpoint will re-assert to ensure the preliminary assertion is still valid. This is used for example to assert that exactly a number of messages arrives. For example if link expectedMessageCount(int) was set to 5 then the assertion is satisfied when 5 or more message arrives. To ensure that exactly 5 messages arrives then you would need to wait a little period to ensure no further message arrives. This is what you can use this link setAssertPeriod(long) method for. By default this period is disabled." },
    "retainFirst": { "kind": "parameter", "type": "integer", "javaType": "int", "deprecated": "false", "defaultValue": "-1", "description": "Specifies to only retain the first n'th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the first 10 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the first 10 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received." },
    "retainLast": { "kind": "parameter", "type": "integer", "javaType": "int", "deprecated": "false", "defaultValue": "-1", "description": "Specifies to only retain the last n'th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the last 20 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the last 20 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received." },
    "copyOnExchange": { "kind": "parameter", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "true", "description": "Sets whether to make a deep copy of the incoming Exchange when received at this mock endpoint. Is by default true." },
    "exchangePattern": { "kind": "parameter", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "defaultValue": "InOnly", "description": "Sets the default exchange pattern when creating an exchange." },
    "synchronous": { "kind": "parameter", "type": "boolean", "javaType": "boolean", "deprecated": "false", "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

